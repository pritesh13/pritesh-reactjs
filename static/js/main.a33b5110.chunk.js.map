{"version":3,"sources":["Table.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["TableHeader","react_default","a","createElement","TableBody","props","rows","characterData","map","row","index","key","name","job","onClick","removeCharacter","Table","_this$props","this","Table_TableHeader","Table_TableBody","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","value","setState","defineProperty","submitForm","handleSubmit","state","initialState","_this$state","type","onChange","App","characters","filter","character","i","concat","toConsumableArray","className","src_Table","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a33b5110.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nconst TableHeader = () => {\n\treturn (\n\t  <thead>\n\t\t<tr>\n\t\t  <th>Name</th>\n\t\t  <th>Job</th>\n\t\t</tr>\n\t  </thead>\n\t)\n  }\n\n  const TableBody = props => {\n\tconst rows = props.characterData.map((row, index) => {\n\t  return (\n\t\t<tr key={index}>\n\t\t  <td>{row.name}</td>\n\t\t  <td>{row.job}</td>\n\t\t  <td>\n\t\t\t<button onClick={() => props.removeCharacter(index)}>Delete</button>\n\t\t</td>\n\t\t</tr>\n\t  )\n\t})\n  \n\treturn <tbody>{rows}</tbody>\n  }\n\nclass Table extends Component {\n\t\n  render() {\n\tconst { characterData, removeCharacter } = this.props\n    return (\n      <table>\n        <TableHeader />\n        <TableBody characterData={characterData} removeCharacter={removeCharacter} />\n\t</table>\n    )\n  }\n}\n\nexport default Table","\nimport React, { Component } from 'react'\n\nclass Form extends Component {\n  constructor(props) {\n    super(props)\n\n    this.initialState = {\n      name: '',\n      job: '',\n    }\n\n    this.state = this.initialState\n  }\n\n  handleChange = event => {\n\tconst { name, value } = event.target\n  \n\tthis.setState({\n\t  [name]: value,\n\t})\n  }\n  submitForm = () => {\n\tthis.props.handleSubmit(this.state)\n\tthis.setState(this.initialState)\n  }\n\n  render() {\n\tconst { name, job } = this.state;\n  \n\treturn (\n\t  <form>\n\t\t<label>Name</label>\n\t\t<input\n\t\t  type=\"text\"\n\t\t  name=\"name\"\n\t\t  value={name}\n\t\t  onChange={this.handleChange} />\n\t\t<label>Job</label>\n\t\t<input\n\t\t  type=\"text\"\n\t\t  name=\"job\"\n\t\t  value={job}\n\t\t  onChange={this.handleChange} />\n\t\t  <input \n\t\t\ttype=\"button\" \n\t\t\tvalue=\"Submit\" \n\t\t\tonClick={this.submitForm} />\n\t  </form>\n\t);\n  } \n}\nexport default Form;","import React, { Component } from 'react';\nimport './App.css';\nimport Table from './Table'\nimport Form from './Form'\n\nclass App extends Component {\n\tstate = {\n\t\tcharacters: [\n\t\t\t{\n\t\t\t\tname: 'Charlie',\n\t\t\t\tjob: 'Janitor',\n\t\t\t  },\n\t\t\t  {\n\t\t\t\tname: 'Mac',\n\t\t\t\tjob: 'Bouncer',\n\t\t\t  },\n\t\t\t  {\n\t\t\t\tname: 'Dee',\n\t\t\t\tjob: 'Aspring actress',\n\t\t\t  }\n\t\t],\n\t}\n\n\tremoveCharacter = index => {\n\t\tconst { characters } = this.state\n\n\t\tthis.setState({\n\t\t\tcharacters: characters.filter((character, i) => {\n\t\t\treturn i !== index\n\t\t\t}),\n\t\t})\n\t};\n\thandleSubmit = character => {\n\t\tthis.setState({ characters: [...this.state.characters, character] })\n\t  }\n\n\trender(){\n\treturn (\n\t\t<div className=\"container\">\n\t\t  <Table characterData={this.state.characters} removeCharacter={this.removeCharacter} />\n\t\t  <Form  handleSubmit={this.handleSubmit} />\n\t\t</div>\n\t  )\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import App from './Api';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}